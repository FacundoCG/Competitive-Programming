Problema: tengo un array de n personas, un peso maximo en el ascensor y quiero saber cuál es la mínima cantidad de viajes.

int minimum_rides(vector<int>& weights, vector<int>& available, int c, int x){
    int n = weights.size();
    res = MAX_INT;

    for (int i = 0; i<n; i++){
        if (available[i] && weights[i] + c <= x){
            available[i] = false;
            res = min(res, minimum_rides(weights, available, c+weights[i], x));
            available[i] = true;
        } else if (available[i]){
            available[i] = false;
            res = min(res, 1 + minimum_rides(weights, available, 0, x));
            available[i] = false;
        }
    }

    return res;
}

tuple<int, int> optimalResults(vector<int>& A, int i, int j, int p){
    if (i == j && p == 1){
        return {A[i], 0};
    }

    if (i == j && p == 2){
        return {0, A[i]};
    }

    if (memo[i][j] == -1){
        if (p == 1){
            memo[i][j] = maxTuple(sumTuple({A[i],0}, optimalResults(A, i+1, j, p+1)), sumTuple({A[j],0}, optimalResults(A, i, j+1, p+1)));
        } 

        if (p == 2){
            memo[i][j] = maxTuple(sumTuple({A[i],0}, optimalResults(A, i+1, j, p+1)), sumTuple({A[j],0}, optimalResults(A, i, j+1, p+1)));
        }
    }   

    return memo[i][j];
}




int optimalResults(vector<int>& A, vector<vector<int>>& memo1, vector<int>& memo2, int i, int j, int p, int sum){
    if (i == j){
        return A[i];
    }

    if (p == 1){
        if (memo1[i][j] == MIN_INT){
            int firstElement = sum - optimalResults(A, memo1, memo2, i+1, j, p+1, sum);
            int lastElement = sum - optimalResults(A, memo1, memo2, i, j-1, p+1, sum);
            memo1[i][j] = max(firstElement, lastElement);
        }

        return memo1[i][j];
    }

    if (p == 2){
        if (memo2[i][j] == MIN_INT){
            int firstElement = sum - optimalResults(A, memo1, memo2, i+1, j, p-1, sum);
            int lastElement = sum - optimalResults(A, memo1, memo2, i, j-1, p-1, sum);
            memo2[i][j] = max(firstElement, lastElement);
        }

        return memo2[i][j];
    }
}



















